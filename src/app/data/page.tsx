/**
 * ‚ö†Ô∏è ÌóåÎ≤ï Ï§ÄÏàò ÌïÑÏàò (CONSTITUTION.md)
 * 
 * Ï†àÎåÄ Î≥ÄÍ≤Ω Í∏àÏßÄ ÏÇ¨Ìï≠:
 * - Pages Functions URL ÏÇ¨Ïö© (https://0-nkey.pages.dev/api/keywords)
 * - ÌïÑÎìúÎ™Ö Î≥ÄÍ≤Ω Í∏àÏßÄ (pc_search, mobile_search Îì±)
 * - D1 Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§Îßå ÏÇ¨Ïö© (Î°úÏª¨ Ïä§ÌÜ†Î¶¨ÏßÄ Ï†úÍ±∞)
 * 
 * ÌóåÎ≤ï Î¨∏ÏÑú: CONSTITUTION.md (Ï†àÎåÄ Î≥ÄÍ≤Ω Í∏àÏßÄ)
 */

'use client'

import { useState, useEffect, useMemo, useCallback, memo } from 'react'

interface KeywordData {
  keyword: string
  avg_monthly_search: number
  blog_total?: number
  cafe_total?: number
  web_total?: number
  news_total?: number
  monthly_click_pc?: number
  monthly_click_mo?: number
  ctr_pc?: number
  ctr_mo?: number
  ad_count?: number
  pc_search: number
  mobile_search: number
  created_at?: string
}

interface FilterValues {
  minAvgSearch: string
  maxAvgSearch: string
  minCafeTotal: string
  maxCafeTotal: string
  minBlogTotal: string
  maxBlogTotal: string
  minWebTotal: string
  maxWebTotal: string
  minNewsTotal: string
  maxNewsTotal: string
}

// Î©îÎ™®Ïù¥Ï†úÏù¥ÏÖòÎêú ÌÇ§ÏõåÎìú Ìñâ Ïª¥Ìè¨ÎÑåÌä∏ (ÏÑ±Îä• ÏµúÏ†ÅÌôî)
const KeywordRow = memo(({ keyword, index }: { keyword: KeywordData; index: number }) => (
  <tr className={index % 2 === 0 ? 'bg-white' : 'bg-gray-50'}>
    <td className="px-4 py-3 whitespace-nowrap text-sm font-medium text-gray-900">
      {keyword.keyword}
    </td>
    <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-500">
      {(keyword.avg_monthly_search || 0).toLocaleString()}
    </td>
    <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-500">
      {(keyword.cafe_total || 0).toLocaleString()}
    </td>
    <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-500">
      {(keyword.blog_total || 0).toLocaleString()}
    </td>
    <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-500">
      {(keyword.web_total || 0).toLocaleString()}
    </td>
    <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-500">
      {(keyword.news_total || 0).toLocaleString()}
    </td>
    <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-500">
      {keyword.monthly_click_pc ? keyword.monthly_click_pc.toFixed(1) : 'N/A'}
    </td>
    <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-500">
      {keyword.monthly_click_mo ? keyword.monthly_click_mo.toFixed(1) : 'N/A'}
    </td>
    <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-500">
      {keyword.ctr_pc ? `${keyword.ctr_pc.toFixed(2)}%` : 'N/A'}
    </td>
    <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-500">
      {keyword.ctr_mo ? `${keyword.ctr_mo.toFixed(2)}%` : 'N/A'}
    </td>
    <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-500">
      {keyword.ad_count?.toLocaleString() || 'N/A'}
    </td>
    <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-500">
      {(keyword.pc_search || 0).toLocaleString()}
    </td>
    <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-500">
      {(keyword.mobile_search || 0).toLocaleString()}
    </td>
    <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-500">
      {keyword.created_at ? new Date(keyword.created_at).toLocaleDateString() : 'N/A'}
    </td>
  </tr>
));

KeywordRow.displayName = 'KeywordRow'

export default function DataPage() {
  const [keywords, setKeywords] = useState<KeywordData[]>([])
  const [loading, setLoading] = useState(true)
  const [message, setMessage] = useState('')
  const [currentPage, setCurrentPage] = useState(1)
  const [itemsPerPage] = useState(50) // ÌéòÏù¥ÏßÄÎãπ 50Í∞ú ÌëúÏãú
  const [totalCount, setTotalCount] = useState(0)
  const [totalPages, setTotalPages] = useState(1)
  const [filters, setFilters] = useState<FilterValues>({
    minAvgSearch: '',
    maxAvgSearch: '',
    minCafeTotal: '',
    maxCafeTotal: '',
    minBlogTotal: '',
    maxBlogTotal: '',
    minWebTotal: '',
    maxWebTotal: '',
    minNewsTotal: '',
    maxNewsTotal: ''
  })
  const [showFilters, setShowFilters] = useState(false)

  // Î©îÎ™®Ïù¥Ï†úÏù¥ÏÖòÎêú ÌÇ§ÏõåÎìú Î°úÎìú Ìï®Ïàò (ÌéòÏù¥ÏßÄ Ïù¥Îèô Î∞©Ïãù)
  const loadKeywords = useCallback(async (page: number = 1) => {
    setLoading(true)

    try {
      // ÌïÑÌÑ∞ ÌååÎùºÎØ∏ÌÑ∞ Íµ¨ÏÑ±
      const params = new URLSearchParams()
      if (filters.minAvgSearch) params.append('minAvgSearch', filters.minAvgSearch)
      if (filters.maxAvgSearch) params.append('maxAvgSearch', filters.maxAvgSearch)
      if (filters.minCafeTotal) params.append('minCafeTotal', filters.minCafeTotal)
      if (filters.maxCafeTotal) params.append('maxCafeTotal', filters.maxCafeTotal)
      if (filters.minBlogTotal) params.append('minBlogTotal', filters.minBlogTotal)
      if (filters.maxBlogTotal) params.append('maxBlogTotal', filters.maxBlogTotal)
      if (filters.minWebTotal) params.append('minWebTotal', filters.minWebTotal)
      if (filters.maxWebTotal) params.append('maxWebTotal', filters.maxWebTotal)
      if (filters.minNewsTotal) params.append('minNewsTotal', filters.minNewsTotal)
      if (filters.maxNewsTotal) params.append('maxNewsTotal', filters.maxNewsTotal)

      // ÌéòÏù¥ÏßÄÎÑ§Ïù¥ÏÖò ÌååÎùºÎØ∏ÌÑ∞
      params.append('page', String(page))
      params.append('pageSize', String(itemsPerPage))
      
      // Î¨∏ÏÑúÏàò 0 Ï†úÏô∏ (Í∏∞Î≥∏Í∞í: true)
      params.append('excludeZeroDocs', 'true')

      const url = `https://0-nkey.pages.dev/api/keywords${params.toString() ? `?${params.toString()}` : ''}`

      // Pages FunctionsÎ•º ÌÜµÌï¥ D1 Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ÏóêÏÑú ÌÇ§ÏõåÎìú Ï°∞Ìöå
      const response = await fetch(url, {
        method: 'GET',
        headers: {
          'x-admin-key': 'dev-key-2024'
        }
      })

      if (response.ok) {
        const data = await response.json()
        if (data.success && Array.isArray(data.keywords)) {
          setKeywords(data.keywords)
          setTotalCount(typeof data.total === 'number' ? data.total : data.keywords.length)

          setMessage(`‚úÖ ÌÅ¥ÎùºÏö∞Îìú D1 Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ÏóêÏÑú ${data.keywords.length}Í∞ú (Ï¥ù ${data.total ?? data.keywords.length}Í∞ú Ï§ë, ÌéòÏù¥ÏßÄ ${page}) Î∂àÎü¨ÏôîÏäµÎãàÎã§.`)

          // Ï†ÑÏ≤¥ ÌéòÏù¥ÏßÄ Ïàò Í≥ÑÏÇ∞
          const calculatedTotalPages = Math.ceil((data.total ?? data.keywords.length) / itemsPerPage)
          setTotalPages(calculatedTotalPages)
          setCurrentPage(page)

          // Î¨∏ÏÑúÏàòÍ∞Ä ÏóÜÎäî ÌÇ§ÏõåÎìú ÏûêÎèô ÏàòÏßë (Ï≤´ ÌéòÏù¥ÏßÄÏóêÏÑúÎßå)
          if (page === 1) {
            const keywordsWithoutDocCounts = data.keywords.filter((kw: KeywordData) =>
              (!kw.blog_total || kw.blog_total === 0) && 
              (!kw.cafe_total || kw.cafe_total === 0) && 
              (!kw.web_total || kw.web_total === 0) && 
              (!kw.news_total || kw.news_total === 0)
            )

            if (keywordsWithoutDocCounts.length > 0) {
              console.log(`üìÑ Î¨∏ÏÑúÏàòÍ∞Ä ÏóÜÎäî ÌÇ§ÏõåÎìú ${keywordsWithoutDocCounts.length}Í∞ú Î∞úÍ≤¨, ÏûêÎèô ÏàòÏßë ÏãúÏûë`)
              setMessage(`‚úÖ ${data.keywords.length}Í∞úÏùò ÌÇ§ÏõåÎìúÎ•º Î∂àÎü¨ÏôîÏäµÎãàÎã§. Î¨∏ÏÑúÏàò ÏûêÎèô ÏàòÏßë Ï§ë... (${keywordsWithoutDocCounts.length}Í∞ú)`)
              
              // Î¨∏ÏÑúÏàò ÏàòÏßë (ÏµúÎåÄ 20Í∞ú, API Ï†úÌïú Í≥†Î†§)
              collectDocCountsForKeywords(keywordsWithoutDocCounts.slice(0, 20))
                .then((result) => {
                  if (result.success) {
                    console.log(`‚úÖ Î¨∏ÏÑúÏàò ÏàòÏßë ÏôÑÎ£å: ${result.successCount}Í∞ú ÏÑ±Í≥µ`)
                    // ÏàòÏßë ÏôÑÎ£å ÌõÑ ÏûêÎèô ÏÉàÎ°úÍ≥†Ïπ® (1Ï¥à ÎåÄÍ∏∞)
                    setTimeout(() => {
                      loadKeywords(1)
                      setMessage(`‚úÖ Î¨∏ÏÑúÏàò ÏàòÏßë ÏôÑÎ£å! ${result.successCount}Í∞ú ÌÇ§ÏõåÎìúÏùò Î¨∏ÏÑúÏàòÎ•º ÏàòÏßëÌñàÏäµÎãàÎã§.`)
                    }, 1000)
                  } else {
                    console.error('Î¨∏ÏÑúÏàò ÏàòÏßë Ïã§Ìå®:', result.message)
                  }
                })
                .catch(err => {
                  console.error('ÏûêÎèô Î¨∏ÏÑúÏàò ÏàòÏßë Ïã§Ìå®:', err)
                  setMessage(`‚ö†Ô∏è Î¨∏ÏÑúÏàò ÏûêÎèô ÏàòÏßë Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§: ${err.message}`)
                })
            }
          }
        } else {
          setKeywords([])
          setMessage('ÌÇ§ÏõåÎìú Îç∞Ïù¥ÌÑ∞Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.')
        }
      } else {
        const errorData = await response.json().catch(() => ({}))
        throw new Error(errorData.message || `Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå Ïã§Ìå®: ${response.status}`)
      }
    } catch (error) {
      console.error('ÌÇ§ÏõåÎìú Ï°∞Ìöå Ïã§Ìå®:', error)
      setMessage(`‚ùå Ï†ÄÏû•Îêú ÌÇ§ÏõåÎìúÎ•º Î∂àÎü¨Ïò§ÎäîÎç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§: ${(error as Error).message}`)
      setKeywords([])
    } finally {
      setLoading(false)
    }
  }, [filters, itemsPerPage])

  // Î¨∏ÏÑúÏàò ÏàòÏßë Ìï®Ïàò
  const collectDocCountsForKeywords = useCallback(async (keywordsToCollect: KeywordData[]) => {
    try {
      console.log(`üìÑ Î¨∏ÏÑúÏàò ÏàòÏßë API Ìò∏Ï∂ú: ${keywordsToCollect.length}Í∞ú ÌÇ§ÏõåÎìú`)
      
      const response = await fetch('https://0-nkey.pages.dev/api/collect-docs-batch', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'x-admin-key': 'dev-key-2024'
        },
        body: JSON.stringify({
          keywords: keywordsToCollect.map(kw => ({
            keyword: kw.keyword,
            id: undefined // ÌÇ§ÏõåÎìú ÌÖçÏä§Ìä∏Î°ú Ï∞æÍ∏∞
          }))
        })
      })

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}))
        throw new Error(errorData.message || `Î¨∏ÏÑúÏàò ÏàòÏßë Ïã§Ìå®: ${response.status}`)
      }

      const result = await response.json()
      return result

    } catch (error) {
      console.error('Î¨∏ÏÑúÏàò ÏàòÏßë API Ìò∏Ï∂ú Ïã§Ìå®:', error)
      throw error
    }
  }, [])

  // ÌéòÏù¥ÏßÄ Ïù¥Îèô Ìï∏Îì§Îü¨
  const handlePageChange = useCallback((newPage: number) => {
    if (newPage >= 1 && newPage <= totalPages) {
      setCurrentPage(newPage)
      loadKeywords(newPage)
      window.scrollTo({ top: 0, behavior: 'smooth' })
    }
  }, [totalPages, loadKeywords])

  // ÌïÑÌÑ∞ Ï†ÅÏö© Ïãú Ï¥àÍ∏∞Ìôî
  const handleApplyFilters = useCallback(() => {
    setCurrentPage(1)
    setKeywords([])
    loadKeywords(1)
  }, [loadKeywords])

  // ÌïÑÌÑ∞ Ï¥àÍ∏∞Ìôî
  const handleResetFilters = useCallback(() => {
    setFilters({
      minAvgSearch: '',
      maxAvgSearch: '',
      minCafeTotal: '',
      maxCafeTotal: '',
      minBlogTotal: '',
      maxBlogTotal: '',
      minWebTotal: '',
      maxWebTotal: '',
      minNewsTotal: '',
      maxNewsTotal: ''
    })
    setCurrentPage(1)
    setKeywords([])
    setTimeout(() => loadKeywords(1), 100)
  }, [loadKeywords])

  useEffect(() => {
    loadKeywords(1)
  }, [])

  // Ìôà ÌéòÏù¥ÏßÄÏóêÏÑú ÌÇ§ÏõåÎìú Ï†ÄÏû• ÏôÑÎ£å Ïãú ÏûêÎèô ÏÉàÎ°úÍ≥†Ïπ®
  useEffect(() => {
    if (typeof BroadcastChannel === 'undefined') return

    const channel = new BroadcastChannel('keyword-saved')
    
    channel.addEventListener('message', (event) => {
      if (event.data?.type === 'KEYWORD_SAVED') {
        const savedCount = event.data.savedCount || 0;
        const updatedCount = event.data.updatedCount || 0;
        const totalCount = event.data.count || 0;
        
        console.log('üíæ ÌÇ§ÏõåÎìú Ï†ÄÏû• ÏôÑÎ£å Í∞êÏßÄ, ÏûêÎèô ÏÉàÎ°úÍ≥†Ïπ®:', { savedCount, updatedCount, totalCount })
        
        // 1Ï¥à ÌõÑ ÏÉàÎ°úÍ≥†Ïπ® (Ï†ÄÏû• ÏôÑÎ£å ÎåÄÍ∏∞)
        setTimeout(() => {
          loadKeywords(1)
          let message = '';
          if (savedCount > 0) {
            message = `‚úÖ ${savedCount}Í∞úÏùò ÏÉà ÌÇ§ÏõåÎìúÍ∞Ä Ï∂îÍ∞ÄÎêòÏñ¥ Ï¥ù ÌÇ§ÏõåÎìú ÏàòÍ∞Ä Ï¶ùÍ∞ÄÌñàÏäµÎãàÎã§.`;
            if (updatedCount > 0) {
              message += ` (Í∏∞Ï°¥ ÌÇ§ÏõåÎìú ${updatedCount}Í∞ú ÏóÖÎç∞Ïù¥Ìä∏)`;
            }
          } else if (updatedCount > 0) {
            message = `‚úÖ Í∏∞Ï°¥ ÌÇ§ÏõåÎìú ${updatedCount}Í∞úÍ∞Ä ÏóÖÎç∞Ïù¥Ìä∏ÎêòÏóàÏäµÎãàÎã§. (Ï¥ù ÌÇ§ÏõåÎìú ÏàòÎäî Î≥ÄÌïòÏßÄ ÏïäÏùå)`;
          } else {
            message = `‚úÖ ${totalCount}Í∞úÏùò ÌÇ§ÏõåÎìúÍ∞Ä Ï≤òÎ¶¨ÎêòÏóàÏäµÎãàÎã§.`;
          }
          setMessage(message)
        }, 1000)
      }
    })

    return () => {
      channel.close()
    }
  }, [loadKeywords])


  const handleClearAll = async () => {
    if (!confirm('Î™®Îì† ÌÇ§ÏõåÎìúÎ•º ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå? Ïù¥ ÏûëÏóÖÏùÄ ÎêòÎèåÎ¶¥ Ïàò ÏóÜÏäµÎãàÎã§.')) {
      return;
    }

    try {
      setLoading(true);
      const response = await fetch('https://0-nkey.pages.dev/api/keywords-delete', {
        method: 'DELETE',
        headers: {
          'x-admin-key': 'dev-key-2024'
        }
      });

      if (response.ok) {
        const data = await response.json();
        if (data.success) {
          setKeywords([]);
          setMessage('‚úÖ Î™®Îì† ÌÇ§ÏõåÎìúÍ∞Ä ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§.');
          setCurrentPage(1);
        } else {
          throw new Error(data.message || 'ÏÇ≠Ï†ú Ïã§Ìå®');
        }
      } else {
        const errorData = await response.json().catch(() => ({}));
        throw new Error(errorData.message || `ÏÇ≠Ï†ú Ïã§Ìå®: ${response.status}`);
      }
    } catch (error) {
      console.error('ÌÇ§ÏõåÎìú ÏÇ≠Ï†ú Ïã§Ìå®:', error);
      setMessage(`‚ùå ÌÇ§ÏõåÎìú ÏÇ≠Ï†ú Ïã§Ìå®: ${(error as Error).message}`);
    } finally {
      setLoading(false);
    }
  }

  const handleFilterChange = (field: keyof FilterValues, value: string) => {
    setFilters(prev => ({
      ...prev,
      [field]: value
    }))
  }

  const handleExport = () => {
    try {
      // CSV Ìó§Îçî ÏÉùÏÑ±
      const headers = [
        'ÌÇ§ÏõåÎìú',
        'Ï¥ùÍ≤ÄÏÉâÎüâ',
        'Ïπ¥ÌéòÎ¨∏ÏÑúÏàò',
        'Î∏îÎ°úÍ∑∏Î¨∏ÏÑúÏàò',
        'ÏõπÎ¨∏ÏÑúÏàò',
        'Îâ¥Ïä§Î¨∏ÏÑúÏàò',
        'ÏõîÌÅ¥Î¶≠(pc)',
        'ÏõîÌÅ¥Î¶≠(m)',
        'ÏõîÌÅ¥Î¶≠Î•†(pc)',
        'ÏõîÌÅ¥Î¶≠Î•†(m)',
        'ÏõîÍ¥ëÍ≥†Ïàò',
        'PC Í≤ÄÏÉâÎüâ',
        'Î™®Î∞îÏùº Í≤ÄÏÉâÎüâ',
        'ÏÉùÏÑ±Ïùº'
      ]

      // CSV Îç∞Ïù¥ÌÑ∞ Ìñâ ÏÉùÏÑ±
      const rows = keywords.map(keyword => [
        keyword.keyword || '',
        keyword.avg_monthly_search || 0,
        keyword.cafe_total || 0,
        keyword.blog_total || 0,
        keyword.web_total || 0,
        keyword.news_total || 0,
        keyword.monthly_click_pc ? keyword.monthly_click_pc.toFixed(1) : '',
        keyword.monthly_click_mo ? keyword.monthly_click_mo.toFixed(1) : '',
        keyword.ctr_pc ? `${keyword.ctr_pc.toFixed(2)}%` : '',
        keyword.ctr_mo ? `${keyword.ctr_mo.toFixed(2)}%` : '',
        keyword.ad_count || '',
        keyword.pc_search || 0,
        keyword.mobile_search || 0,
        keyword.created_at ? new Date(keyword.created_at).toLocaleDateString() : ''
      ])

      // CSV ÌòïÏãùÏúºÎ°ú Î≥ÄÌôò (ÏâºÌëúÎ°ú Íµ¨Î∂Ñ, Îî∞Ïò¥ÌëúÎ°ú Í∞êÏã∏Í∏∞)
      const csvContent = [
        headers.join(','),
        ...rows.map(row => row.map(cell => {
          // ÏâºÌëú, Îî∞Ïò¥Ìëú, Ï§ÑÎ∞îÍøàÏù¥ Ìè¨Ìï®Îêú Í≤ΩÏö∞ Îî∞Ïò¥ÌëúÎ°ú Í∞êÏã∏Í∏∞
          const cellStr = String(cell)
          if (cellStr.includes(',') || cellStr.includes('"') || cellStr.includes('\n')) {
            return `"${cellStr.replace(/"/g, '""')}"`
          }
          return cellStr
        }).join(','))
      ].join('\n')

      // BOM Ï∂îÍ∞Ä (ÌïúÍ∏Ä Íπ®Ïßê Î∞©ÏßÄ)
      const BOM = '\uFEFF'
      const csvWithBOM = BOM + csvContent

      // Blob ÏÉùÏÑ± Î∞è Îã§Ïö¥Î°úÎìú
      const dataBlob = new Blob([csvWithBOM], { type: 'text/csv;charset=utf-8;' })
      const url = URL.createObjectURL(dataBlob)
      const link = document.createElement('a')
      link.href = url
      link.download = `keywords-${new Date().toISOString().split('T')[0]}.csv`
      link.click()
      URL.revokeObjectURL(url)
      setMessage(`‚úÖ ÌÇ§ÏõåÎìú Îç∞Ïù¥ÌÑ∞Î•º CSV ÌååÏùºÎ°ú ÎÇ¥Î≥¥ÎÉàÏäµÎãàÎã§. (${keywords.length}Í∞ú)`)
    } catch (error) {
      console.error('CSV ÎÇ¥Î≥¥ÎÇ¥Í∏∞ Ïã§Ìå®:', error)
      setMessage('‚ùå Îç∞Ïù¥ÌÑ∞ ÎÇ¥Î≥¥ÎÇ¥Í∏∞Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§: ' + (error as Error).message)
    }
  }

  // ÌÜµÍ≥Ñ Í≥ÑÏÇ∞ (ÌòÑÏû¨ Î°úÎìúÎêú Îç∞Ïù¥ÌÑ∞ Í∏∞Î∞ò)
  const totalKeywords = totalCount
  const loadedKeywords = keywords
  const totalSearchVolume = loadedKeywords.reduce((sum, k) => sum + (k.avg_monthly_search || 0), 0)
  const avgSearchVolume = loadedKeywords.length > 0 ? Math.round(totalSearchVolume / loadedKeywords.length) : 0
  const totalPcSearch = loadedKeywords.reduce((sum, k) => sum + (k.pc_search || 0), 0)
  const totalMobileSearch = loadedKeywords.reduce((sum, k) => sum + (k.mobile_search || 0), 0)

  if (loading) {
    return (
      <div className="flex justify-center items-center h-64">
        <div className="text-lg text-gray-600">Îç∞Ïù¥ÌÑ∞Î•º Î∂àÎü¨Ïò§Îäî Ï§ë...</div>
      </div>
    )
  }

  return (
    <div className="space-y-6">
      <div className="card">
        <h1 className="text-3xl font-bold text-gray-900 mb-4">Ï†ÄÏû•Îêú ÌÇ§ÏõåÎìú Îç∞Ïù¥ÌÑ∞</h1>
        
        {message && (
          <div className={`p-3 rounded-lg mb-4 ${
            message.includes('Î∂àÎü¨ÏôîÏäµÎãàÎã§') || message.includes('ÎÇ¥Î≥¥ÎÉàÏäµÎãàÎã§')
              ? 'bg-green-50 text-green-700' 
              : 'bg-red-50 text-red-700'
          }`}>
            {message}
          </div>
        )}

        <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
          <div className="bg-blue-50 p-4 rounded-lg">
            <h3 className="text-sm font-medium text-blue-800">Ï¥ù ÌÇ§ÏõåÎìú Ïàò</h3>
            <p className="text-2xl font-bold text-blue-900">{totalKeywords.toLocaleString()}</p>
          </div>
          <div className="bg-green-50 p-4 rounded-lg">
            <h3 className="text-sm font-medium text-green-800">Ï¥ù Í≤ÄÏÉâÎüâ</h3>
            <p className="text-2xl font-bold text-green-900">{totalSearchVolume.toLocaleString()}</p>
          </div>
          <div className="bg-purple-50 p-4 rounded-lg">
            <h3 className="text-sm font-medium text-purple-800">ÌèâÍ∑† Í≤ÄÏÉâÎüâ</h3>
            <p className="text-2xl font-bold text-purple-900">{avgSearchVolume.toLocaleString()}</p>
          </div>
          <div className="bg-orange-50 p-4 rounded-lg">
            <h3 className="text-sm font-medium text-orange-800">PC/Î™®Î∞îÏùº ÎπÑÏú®</h3>
            <p className="text-2xl font-bold text-orange-900">
              {totalPcSearch > 0 || totalMobileSearch > 0
                ? `${Math.round((totalPcSearch / (totalPcSearch + totalMobileSearch)) * 100)}% / ${Math.round((totalMobileSearch / (totalPcSearch + totalMobileSearch)) * 100)}%`
                : 'N/A'}
            </p>
          </div>
        </div>

        <div className="flex space-x-4 mb-6">
          <button
            onClick={() => loadKeywords(currentPage)}
            className="btn-secondary"
          >
            ÏÉàÎ°úÍ≥†Ïπ®
          </button>
          <button
            onClick={() => setShowFilters(!showFilters)}
            className="btn-secondary"
          >
            {showFilters ? 'ÌïÑÌÑ∞ Ïà®Í∏∞Í∏∞' : 'ÌïÑÌÑ∞ Î≥¥Í∏∞'}
          </button>
          <button
            onClick={handleExport}
            disabled={keywords.length === 0}
            className="btn-primary disabled:opacity-50"
          >
            CSV ÎÇ¥Î≥¥ÎÇ¥Í∏∞
          </button>
          <button
            onClick={handleClearAll}
            disabled={keywords.length === 0}
            className="btn-danger disabled:opacity-50"
          >
            Ï†ÑÏ≤¥ ÏÇ≠Ï†ú
          </button>
        </div>

        {/* ÌïÑÌÑ∞ ÏÑπÏÖò */}
        {showFilters && (
          <div className="border-t pt-6 mt-6">
            <h3 className="text-lg font-semibold text-gray-900 mb-4">ÌïÑÌÑ∞ ÏÑ§Ï†ï</h3>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4">
              {/* Ï¥ùÍ≤ÄÏÉâÏàò ÌïÑÌÑ∞ */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Ï¥ùÍ≤ÄÏÉâÏàò</label>
                <div className="flex space-x-2">
                  <input
                    type="number"
                    placeholder="ÏµúÏÜå"
                    value={filters.minAvgSearch}
                    onChange={(e) => handleFilterChange('minAvgSearch', e.target.value)}
                    className="input-field flex-1"
                  />
                  <input
                    type="number"
                    placeholder="ÏµúÎåÄ"
                    value={filters.maxAvgSearch}
                    onChange={(e) => handleFilterChange('maxAvgSearch', e.target.value)}
                    className="input-field flex-1"
                  />
                </div>
              </div>

              {/* Ïπ¥ÌéòÎ¨∏ÏÑúÏàò ÌïÑÌÑ∞ */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Ïπ¥ÌéòÎ¨∏ÏÑúÏàò</label>
                <div className="flex space-x-2">
                  <input
                    type="number"
                    placeholder="ÏµúÏÜå"
                    value={filters.minCafeTotal}
                    onChange={(e) => handleFilterChange('minCafeTotal', e.target.value)}
                    className="input-field flex-1"
                  />
                  <input
                    type="number"
                    placeholder="ÏµúÎåÄ"
                    value={filters.maxCafeTotal}
                    onChange={(e) => handleFilterChange('maxCafeTotal', e.target.value)}
                    className="input-field flex-1"
                  />
                </div>
              </div>

              {/* Î∏îÎ°úÍ∑∏Î¨∏ÏÑúÏàò ÌïÑÌÑ∞ */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Î∏îÎ°úÍ∑∏Î¨∏ÏÑúÏàò</label>
                <div className="flex space-x-2">
                  <input
                    type="number"
                    placeholder="ÏµúÏÜå"
                    value={filters.minBlogTotal}
                    onChange={(e) => handleFilterChange('minBlogTotal', e.target.value)}
                    className="input-field flex-1"
                  />
                  <input
                    type="number"
                    placeholder="ÏµúÎåÄ"
                    value={filters.maxBlogTotal}
                    onChange={(e) => handleFilterChange('maxBlogTotal', e.target.value)}
                    className="input-field flex-1"
                  />
                </div>
              </div>

              {/* ÏõπÎ¨∏ÏÑúÏàò ÌïÑÌÑ∞ */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">ÏõπÎ¨∏ÏÑúÏàò</label>
                <div className="flex space-x-2">
                  <input
                    type="number"
                    placeholder="ÏµúÏÜå"
                    value={filters.minWebTotal}
                    onChange={(e) => handleFilterChange('minWebTotal', e.target.value)}
                    className="input-field flex-1"
                  />
                  <input
                    type="number"
                    placeholder="ÏµúÎåÄ"
                    value={filters.maxWebTotal}
                    onChange={(e) => handleFilterChange('maxWebTotal', e.target.value)}
                    className="input-field flex-1"
                  />
                </div>
              </div>

              {/* Îâ¥Ïä§Î¨∏ÏÑúÏàò ÌïÑÌÑ∞ */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Îâ¥Ïä§Î¨∏ÏÑúÏàò</label>
                <div className="flex space-x-2">
                  <input
                    type="number"
                    placeholder="ÏµúÏÜå"
                    value={filters.minNewsTotal}
                    onChange={(e) => handleFilterChange('minNewsTotal', e.target.value)}
                    className="input-field flex-1"
                  />
                  <input
                    type="number"
                    placeholder="ÏµúÎåÄ"
                    value={filters.maxNewsTotal}
                    onChange={(e) => handleFilterChange('maxNewsTotal', e.target.value)}
                    className="input-field flex-1"
                  />
                </div>
              </div>
            </div>

            <div className="flex space-x-4 mt-4">
              <button
                onClick={handleApplyFilters}
                className="btn-primary"
              >
                ÌïÑÌÑ∞ Ï†ÅÏö©
              </button>
              <button
                onClick={handleResetFilters}
                className="btn-secondary"
              >
                ÌïÑÌÑ∞ Ï¥àÍ∏∞Ìôî
              </button>
            </div>
          </div>
        )}
      </div>

      {keywords.length === 0 ? (
        <div className="card text-center py-12">
          <h3 className="text-lg font-medium text-gray-900 mb-2">Ï†ÄÏû•Îêú ÌÇ§ÏõåÎìúÍ∞Ä ÏóÜÏäµÎãàÎã§</h3>
          <p className="text-gray-600 mb-4">Î©îÏù∏ ÌéòÏù¥ÏßÄÏóêÏÑú ÌÇ§ÏõåÎìúÎ•º ÏàòÏßëÌï¥Î≥¥ÏÑ∏Ïöî.</p>
          <a href="/" className="btn-primary">
            ÌÇ§ÏõåÎìú ÏàòÏßëÌïòÍ∏∞
          </a>
        </div>
      ) : (
        <>
          <div className="card">
            <h2 className="text-xl font-bold text-gray-900 mb-4">
              ÌÇ§ÏõåÎìú Î™©Î°ù ({keywords.length.toLocaleString()}Í∞ú ÌëúÏãú / Ï¥ù {totalCount.toLocaleString()}Í∞ú)
            </h2>

          <div className="overflow-x-auto">
            <table className="min-w-full divide-y divide-gray-200">
              <thead className="bg-gray-50">
                <tr>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    ÌÇ§ÏõåÎìú
                  </th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Ï¥ùÍ≤ÄÏÉâÎüâ
                  </th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Ïπ¥ÌéòÎ¨∏ÏÑúÏàò
                  </th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Î∏îÎ°úÍ∑∏Î¨∏ÏÑúÏàò
                  </th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    ÏõπÎ¨∏ÏÑúÏàò
                  </th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Îâ¥Ïä§Î¨∏ÏÑúÏàò
                  </th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    ÏõîÌÅ¥Î¶≠(pc)
                  </th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    ÏõîÌÅ¥Î¶≠(m)
                  </th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    ÏõîÌÅ¥Î¶≠Î•†(pc)
                  </th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    ÏõîÌÅ¥Î¶≠Î•†(m)
                  </th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    ÏõîÍ¥ëÍ≥†Ïàò
                  </th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    PC Í≤ÄÏÉâÎüâ
                  </th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Î™®Î∞îÏùº Í≤ÄÏÉâÎüâ
                  </th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    ÏÉùÏÑ±Ïùº
                  </th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                  {keywords.map((keyword, index) => (
                    <KeywordRow key={keyword.keyword || index} keyword={keyword} index={index} />
                  ))}
              </tbody>
            </table>
          </div>

        {/* ÌéòÏù¥ÏßÄÎÑ§Ïù¥ÏÖò */}
            {totalPages > 1 && (
              <div className="mt-6 flex items-center justify-center space-x-2 flex-wrap">
                <button
                  onClick={() => handlePageChange(1)}
                  disabled={currentPage === 1}
                  className={`px-3 py-2 rounded text-sm font-medium transition-colors ${
                    currentPage === 1
                      ? 'bg-gray-200 text-gray-400 cursor-not-allowed'
                      : 'bg-blue-600 text-white hover:bg-blue-700'
                  }`}
                >
                  Ï≤´ ÌéòÏù¥ÏßÄ
                </button>
                
                <button
                  onClick={() => handlePageChange(currentPage - 1)}
                  disabled={currentPage === 1}
                  className={`px-3 py-2 rounded text-sm font-medium transition-colors ${
                    currentPage === 1
                      ? 'bg-gray-200 text-gray-400 cursor-not-allowed'
                      : 'bg-blue-600 text-white hover:bg-blue-700'
                  }`}
                >
                  Ïù¥Ï†Ñ
                </button>

                <div className="flex items-center space-x-1">
                  {Array.from({ length: Math.min(5, totalPages) }, (_, i) => {
                    let pageNum: number
                    if (totalPages <= 5) {
                      pageNum = i + 1
                    } else if (currentPage <= 3) {
                      pageNum = i + 1
                    } else if (currentPage >= totalPages - 2) {
                      pageNum = totalPages - 4 + i
                    } else {
                      pageNum = currentPage - 2 + i
                    }
                    
                    return (
                      <button
                        key={pageNum}
                        onClick={() => handlePageChange(pageNum)}
                        className={`px-3 py-2 rounded text-sm font-medium transition-colors ${
                          currentPage === pageNum
                            ? 'bg-blue-600 text-white'
                            : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
                        }`}
                      >
                        {pageNum}
                      </button>
                    )
                  })}
                </div>

                <button
                  onClick={() => handlePageChange(currentPage + 1)}
                  disabled={currentPage === totalPages}
                  className={`px-3 py-2 rounded text-sm font-medium transition-colors ${
                    currentPage === totalPages
                      ? 'bg-gray-200 text-gray-400 cursor-not-allowed'
                      : 'bg-blue-600 text-white hover:bg-blue-700'
                  }`}
                >
                  Îã§Ïùå
                </button>

                <button
                  onClick={() => handlePageChange(totalPages)}
                  disabled={currentPage === totalPages}
                  className={`px-3 py-2 rounded text-sm font-medium transition-colors ${
                    currentPage === totalPages
                      ? 'bg-gray-200 text-gray-400 cursor-not-allowed'
                      : 'bg-blue-600 text-white hover:bg-blue-700'
                  }`}
                >
                  ÎßàÏßÄÎßâ ÌéòÏù¥ÏßÄ
                </button>

                <span className="ml-4 text-sm text-gray-600">
                  ÌéòÏù¥ÏßÄ {currentPage} / {totalPages}
                </span>
              </div>
            )}
          </div>
        </>
      )}

      <div className="card">
        <h3 className="text-lg font-semibold text-gray-900 mb-4">Îç∞Ïù¥ÌÑ∞ Í¥ÄÎ¶¨</h3>
        <div className="space-y-2 text-sm text-gray-600">
          <p>‚Ä¢ Îç∞Ïù¥ÌÑ∞Îäî Cloudflare D1 Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§Ïóê ÏïàÏ†ÑÌïòÍ≤å Ï†ÄÏû•Îê©ÎãàÎã§</p>
          <p>‚Ä¢ Ìôà ÌéòÏù¥ÏßÄÏóêÏÑú ÏàòÏßëÌïú ÌÇ§ÏõåÎìúÎäî ÏûêÎèôÏúºÎ°ú Ïù¥ ÌéòÏù¥ÏßÄÏóê ÌëúÏãúÎê©ÎãàÎã§</p>
          <p>‚Ä¢ "ÏÉàÎ°úÍ≥†Ïπ®" Î≤ÑÌäºÏùÑ ÌÅ¥Î¶≠ÌïòÏó¨ ÏµúÏã† Îç∞Ïù¥ÌÑ∞Î•º Î∂àÎü¨Ïò¨ Ïàò ÏûàÏäµÎãàÎã§</p>
          <p>‚Ä¢ Ï§ëÏöîÌïú Îç∞Ïù¥ÌÑ∞Îäî "CSV ÎÇ¥Î≥¥ÎÇ¥Í∏∞" Í∏∞Îä•ÏúºÎ°ú Î∞±ÏóÖÌïòÏÑ∏Ïöî</p>
          <p>‚Ä¢ Îç∞Ïù¥ÌÑ∞Îäî Pages FunctionsÎ•º ÌÜµÌï¥ D1ÏóêÏÑú Ï°∞ÌöåÎê©ÎãàÎã§</p>
        </div>
      </div>
    </div>
  )
}